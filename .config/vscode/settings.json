{
  "editor.lineNumbers": "relative",
  
  // Hide everything we can.
  "window.commandCenter": false,
  "workbench.layoutControl.enabled": false,
  "workbench.activityBar.visible": false,
  "editor.minimap.enabled": false,

  "editor.tabSize": 2,
  "editor.fontFamily": "CaskaydiaCove Nerd Font Mono Light",
  "editor.fontLigatures": false,


  // Set font-size discretely so it's closer in size to the status bar, which
  // VSCode has made extremely small by default for some reason.
  "editor.fontSize": 11,
  "terminal.integrated.fontSize": 11,

  // FYI these values have different denominators. Don't shoot the messenger.
  "editor.lineHeight": 16,
  "terminal.integrated.lineHeight": 1.3,

  "editor.tokenColorCustomizations": {
    "textMateRules": [
      {
        "scope": "comment",
        "settings": {
          "fontStyle": "italic"
        }
      }
    ]
  },

  "workbench.colorTheme": "Night Owl",

  "typescript.updateImportsOnFileMove.enabled": "always",
  "javascript.updateImportsOnFileMove.enabled": "always",

  "security.workspace.trust.untrustedFiles": "open",
  "editor.largeFileOptimizations": false,
  "redhat.telemetry.enabled": false,
  "eslint.validate": ["javascript", "javascriptreact"],

  // Git
  "git.openRepositoryInParentFolders": "never",
  // By default, hitting <enter> will open the diff view for the file
  // rather than the file itself.
  "git.openDiffOnClick": false,
  // Because j/k will help navigate up and down, not having the commit
  // input / action buttons is preferable.
  "git.showCommitInput": false,
  "git.showActionButton": {
    "commit": false,
    "publish": false,
    "sync": false
  },

  "terminal.integrated.shellArgs.osx": ["-l"],
  "terminal.integrated.tabs.enabled": false,

  // Make breadcrumbs work more like vim-vinegar
  // @see https://stackoverflow.com/questions/54834068/replacement-for-vim-vinegar-in-vs-code
  "breadcrumbs.enabled": true,
  "workbench.editor.showTabs": false,
  // Pare back the breadcrumbs so that they only show (and allow navigation
  // along) the file-path, a la traversal in netrw with vinegar.
  "breadcrumbs.showVariables": false,
  "breadcrumbs.showTypeParameters": false,
  "breadcrumbs.showStructs": false,
  "breadcrumbs.showStrings": false,
  "breadcrumbs.showProperties": false,
  "breadcrumbs.showPackages": false,
  "breadcrumbs.showOperators": false,
  "breadcrumbs.showObjects": false,
  "breadcrumbs.showNumbers": false,
  "breadcrumbs.showNull": false,
  "breadcrumbs.showNamespaces": false,
  "breadcrumbs.showModules": false,
  "breadcrumbs.showMethods": false,
  "breadcrumbs.showKeys": false,
  "breadcrumbs.showInterfaces": false,
  "breadcrumbs.showFunctions": false,
  "breadcrumbs.showFiles": false,
  "breadcrumbs.showFields": false,
  "breadcrumbs.showEvents": false,
  "breadcrumbs.showEnums": false,
  "breadcrumbs.showEnumMembers": false,
  "breadcrumbs.showConstructors": false,
  "breadcrumbs.showConstants": false,
  "breadcrumbs.showClasses": false,
  "breadcrumbs.showBooleans": false,
  "breadcrumbs.showArrays": false,
  "breadcrumbs.icons": false,
  "breadcrumbs.symbolPath": "off",

  "vim.leader": "<space>",
  "vim.overrideCopy": true,

  "vim.visualModeKeyBindingsNonRecursive": [
    // Move selection vertically
    {
      "before": ["K"],
      "commands": [
        {
          "when": "editorTextFocus && !editorReadOnly",
          "command": "editor.action.moveLinesUpAction"
        }
      ]
    },
    {
      "before": ["J"],
      "commands": [
        {
          "when": "editorTextFocus && !editorReadOnly",
          "command": "editor.action.moveLinesDownAction"
        }
      ]
    }
  ],

  "vim.normalModeKeyBindingsNonRecursive": [
    // Trigger emulated vinegar traversal
    {
      "before": ["-"],
      "commands": [
        {
          "command": "breadcrumbs.toggleToOn",
          "when": "!config.breadcrumbs.enabled"
        },
        {
          "command": "breadcrumbs.focusAndSelect",
          "when": "breadcrumbsPossible"
        }
      ]
    },
    {
      "before": ["<leader>", "v", "%"], // "vinegar new-file"
      "commands": [
        {
          "command": "workbench.action.tasks.runTask",
          "args": "newFile", // Need to improve this
          "when": "editorFocus"
        }
      ]
    },
    {
      "before": ["<leader>", "v", "d"], // "vinegar new-dir"
      "commands": [
        {
          "command": "workbench.action.tasks.runTask",
          "args": "newDir", // Need to improve this
          "when": "editorFocus"
        }
      ]
    },
    {
      "before": ["<leader>", "v", "x"], // "vinegar delete"
      "commands": [
        {
          "command": "workbench.action.tasks.runTask",
          "args": "deleteFile", // Need to improve this
          "when": "editorFocus"
        }
      ]
    },
    {
      "before": ["<leader>", "v", "X"], // "vinegar force-delete"
      "commands": [
        {
          "command": "workbench.action.tasks.runTask",
          "args": "deleteFileForce", // Need to improve this
          "when": "editorFocus"
        }
      ]
    },
    {
      "before": ["<leader>", "v", "r"], // "vinegar rename"
      "commands": [
        {
          "command": "renameFile",
          "args": "renameFile", // Need to improve this
          "when": "editorFocus"
        }
      ]
    },

    // Next / prev problem
    {
      "before": ["]", "a"],
      "commands": ["editor.action.marker.next"]
    },
    {
      "before": ["[", "a"],
      "commands": ["editor.action.marker.prev"]
    },
    {
      "before": ["]", "c"],
      "commands": ["workbench.action.editor.nextChange"],
      "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
      "before": ["[", "c"],
      "commands": ["workbench.action.editor.previousChange"],
      "when": "editorTextFocus && !textCompareEditorActive"
    },

    // "LSP-like"
    {
      "before": ["K"],
      "commands": [
        { "command": "editor.action.showHover", "when": "editorTextFocus" }
      ]
    },
    {
      "before": ["g", "r"],
      "commands": [
        {
          "command": "editor.action.rename",
          "when": "editorHasRenameProvider && editorTextFocus && !editorReadOnly"
        }
      ]
    },
    {
      "before": ["g", "R"],
      "commands": [
        {
          "command": "editor.action.goToReferences",
          "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
        }
      ]
    },
    {
      "before": ["g", "a"],
      "commands": [
        {
          "command": "editor.action.quickFix",
          "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadOnly"
        }
      ]
    },

    // "Telescope-like"
    {
      "before": ["<leader>", "<leader>"], // "find buffer"
      "commands": ["workbench.action.showAllEditors"]
    },
    {
      "before": ["<leader>", "f", "t"], // "find task",
      "commands": ["workbench.action.tasks.runTask"]
    },
    {
      "before": ["<leader>", "f", "c"], // "find command",
      "commands": ["command-runner.run"]
    },
    {
      "before": ["<leader>", "f", "g"], // "find with grep"
      "commands": ["find-it-faster.findWithinFiles"]
    },
    {
      // This is more "tmux-like" than anything else, but because I use
      // tmux inside the VS Code integrated terminal, I'd prefer not to
      // overload the existing tmux-keybinds and instead will learn this
      // new one.
      "before": ["<leader>", "f", "p"], // "find project"
      "commands": ["projectManager.listProjectsNewWindow"]
    },

    // vim-abolish emulation
    {
      "before": ["c", "r", "c"],
      "commands": ["editor.action.transformToCamelcase"]
    },
    {
      "before": ["c", "r", "s"],
      "commands": ["editor.action.transformToSnakecase"]
    },
    {
      // Abolish calls for this rather than typical "Uppercase",
      // but because Vim natively supports uppercase in normal
      // mode via `U`, we'll default to Abolish's defaults.
      "before": ["c", "r", "u"],
      "commands": [
        "editor.action.transformToSnakecase",
        "editor.action.transformToUppercase"
      ]
    },
    {
      "before": ["c", "r", "-"],
      "commands": ["editor.action.transformToKebabcase"]
    },
    // There are others here that we're not replicating.

    {
      // "Only" - implements "close (not delete) all other buffers"
      // TODO: Consider moving this out of vim settings (where editor-centric
      // settings are) and into keybindings.json (for application-centric settings)
      "before": ["<leader>", "o"],
      "commands": [
        "workbench.action.joinAllGroups",
        "workbench.action.closePanel",
        // Close primary / secondary sidebars
        "workbench.action.closeSidebar",
        "workbench.action.closeAuxiliaryBar"
      ]
    },
    // In vim (at least in my workflows), when I quit a buffer (via :q), the
    // corresponding pane disappears and the remaining splits even out. It's
    // not yet clear to me whether VSCode vim will allow for me to override
    // :q (which appears to just close the "buffer" but persist the "pane",
    // loading up the next buffer in that pane's stack - VSCode uses the
    // terms "Editor" and "Group" but the principles remain the same), so in
    // the meantime I'm binding a custom one that I'll learn instead.
    {
      "before": ["<leader>", "q"],
      "commands": ["workbench.action.closeEditorsInGroup"]
    },

    {
      "before": ["<leader>", "f"],
      "commands": ["revealInExplorer"]
    },

    // Git
    {
      "before": ["<leader>", "g", "y"], // "git yank"
      "commands": ["gitlens.copyRemoteFileUrlToClipboard"]
    },
    {
      "before": ["<leader>", "c", "i"], // resolve Conflict with Incoming
      "commands": ["merge-conflict.accept.incoming"]
    },
    {
      "before": ["<leader>", "c", "c"], // resolve Conflict with Current
      "commands": ["merge-conflict.accept.current"]
    },

    // Spectre-like
    {
      "before": ["<leader>", "S"],
      "commands": [
        // Because the Search Editor isn't a buffer (as in Spectre / nvim),
        // it's not included in the location stack, so "ctrl+o" / "ctrl+i"
        // doesn't work here. Instead I'll try to use cmd+w to close it,
        // and because I'm using "openEditor" (rather than "openNewEditor"),
        // re-launching using "<leader>s" will re-open the same search.
        // "commands": ["search.action.openEditor"]
        {
          "command": "search.action.openEditor",
          "when": "!inSearchEditor"
        },
        // Return to the search input if you're already in there
        {
          "command": "search.action.focusQueryEditorWidget",
          "when": "inSearchEditor"
        }
      ]
    },
    {
      "before": ["<leader>", ":"],
      "commands": [
        {
          "command": "workbench.action.terminal.focus"
        }
      ]
    },

    // Git
    {
      "before": ["<leader>", "G"],
      "commands": [
        { "command": "workbench.action.tasks.runTask", "args": "fugitive" }
      ]
    },
    {
      "before": ["<leader>", "g", "b"],
      // List branches for checkout - sorts by committerdate by default... but then
      // unsorts when you start searching? Likely can be improved.
      "commands": ["git.checkout"]
    },
    {
      "before": ["<leader>", "g", "c"],
      // Checkout new branch (This VSCode command name is very misleading.)
      "commands": ["git.branch"]
    }
    // {
    //   "before": ["<leader>", "g", "g"],
    //   "commands": [
    //     {
    //       "command": "command-runner.run",
    //       "args": {
    //         "command": "echo \"hello world\"",
    //         "terminal": "runCommand"
    //       }
    //     }
    //   ]
    // }
  ],

  //   // Edamagit
  //   {
  //     "before": ["<leader>", "G"],
  //     "commands": ["magit.status"]
  //   }
  // ],

  "command-runner.terminal.name": "runCommand",
  "command-runner.terminal.autoClear": true,
  "command-runner.commands": {
    // Some examples (feel free to remove)
    "echo workspaceFolder": "echo ${workspaceFolder}",
    "echo file": "echo ${file}",

    "gwip": "git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign --message \"--wip-- [skip ci]\""
  },

  // Move VSCode Vim extension execution to a "dedicated host extension
  // process" which makes it faster.
  "extensions.experimental.affinity": {
    "vscodevim.vim": 1
  },
  "githubPullRequests.pullBranch": "never",

  "peacock.favoriteColors": [{ "name": "Just Gray", "value": "#444" }],
  "vscode_custom_css.imports": [
    "file:///Users/scottyeck/.config/vscode/custom.css"
  ],
  "workbench.editor.labelFormat": "medium",
  "window.zoomLevel": 1.0455173977264463,

  "foam.openDailyNote.directory": "/Users/scottyeck/notes/daily",
  "foam.openDailyNote.filenameFormat": "yyyy-mm-dd",
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "diffEditor.renderSideBySide": false
}
