// Place your key bindings in this file to override the defaults
[
  // Make breadcrumbs work more like vim-vinegar
  // @see https://stackoverflow.com/questions/54834068/replacement-for-vim-vinegar-in-vs-code
  {
    "key": "-",
    "command": "breadcrumbs.focusPrevious",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "alt+f8",
    "command": "-editor.action.marker.next",
    "when": "editorFocus"
  },
  {
    "key": "shift+alt+f8",
    "command": "-editor.action.marker.prev",
    "when": "editorFocus"
  },

  // "Telescope-like"
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpen"
  },

  // Disabling defaults to encourage use of vim analogs where possible
  {
    "key": "cmd+s",
    "command": "-workbench.action.files.save",
  },
  // {
  //   "key": "cmd+w",
  //   "command": "-workbench.action.closeActiveEditor",
  // },

  // Tmux / Vim style pane-navigation
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft",
    "when": "!inQuickOpen"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight",
    "when": "!inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp",
    "when": "!inQuickOpen"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown",
    "when": "!inQuickOpen"
  },
  {
    "key": "ctrl+w =",
    "command": "workbench.action.evenEditorWidths"
  },
  {
    "key": "ctrl+w j",
    "command": "workbench.action.increaseViewSize"
  },
  {
    "key": "ctrl+w k",
    "command": "workbench.action.decreaseViewSize"
  },
  // Move up and down in a list in the sidebar
  {
    "key": "j",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "k",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "enter",
    "command": "list.select",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  {
    "key": "ctrl+e c",
    // "command": "welcome.showNewFileEntries",
    "command": "explorer.newFile",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  {
    "key": "ctrl+e r",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  {
    "key": "ctrl+e d",
    "command": "explorer.newFolder",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },

  // Move up and down in a list in the pop-up menu
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenNavigateNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenNavigatePrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+v",
    "command": "breadcrumbs.revealFocusedFromTreeAside",
    "when": "inQuickOpen"
  },

  // In quick fix
  // @see https://stackoverflow.com/a/68686750
  {
    "key": "ctrl+k",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },

  // References list
  {
    "key": "ctrl+j",
    "command": "goToNextReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "ctrl+k",
    "command": "goToPreviousReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },

  // Search ("Spectre-like")
  {
    "key": "enter",
    // Sorta counter-intuitive, but the Search Editor uses "Go-to-Definition"
    // for result-navigation rather than exposing a "Go to result file" or something.
    "command": "editor.action.revealDefinition",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "ctrl+j",
    "command": "search.action.focusNextSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "ctrl+k",
    "command": "search.action.focusPreviousSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "ctrl+u",
    "command": "extension.vim_ctrl+u",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "ctrl+d",
    "command": "extension.vim_ctrl+d",
    "when": "hasSearchResult || inSearchEditor"
  },

  // Autocomplete window (aka "Suggest Widget")
  // @see https://stackoverflow.com/a/48098133
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },

  {
    "key": "ctrl+g g",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.terminal.toggleTerminal"
      ]
    }
  },
  // {
  //   "key": "ctrl+g g",
  //   "command": "runCommands",
  //   "args": {
  //     "commands": [
  //       "workbench.action.openPanel",
  //       "workbench.action.focusActiveEditorGroup"
  //     ]
  //   },
  //   "when": "terminalFocus"
  // },
  {
    "key": "cmd+j cmd+q",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.togglePanel",
      ]
    }
  },

  {
    "key": "cmd+j cmd+r",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.positionPanelRight",
        "workbench.action.terminal.focus"
      ]
    },
    "when": "panelPosition == 'bottom'"
  },
  {
    "key": "cmd+j cmd+r",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.positionPanelBottom",
        "workbench.action.terminal.focus"
      ]
    },
    "when": "panelPosition == 'right'"
  },
  {
    "key": "ctrl+g f",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "cmd+alt+i",
    "command": "workbench.action.toggleDevTools"
    // Technically same as system without "when: isDevelopment" clause
  },

  {
    "key": "ctrl+g n",
    "command": "workbench.action.terminal.focusNext"
  },
  {
    "key": "ctrl+g p",
    "command": "workbench.action.terminal.focusPrevious"
  },
  {
    "key": "ctrl+g d",
    "command": "workbench.action.terminal.kill"
  },
  {
    "key": "ctrl+g ,",
    "command": "workbench.action.terminal.rename"
  },
  {
    "key": "ctrl+g c",
    "command": "workbench.action.terminal.new"
  },

  {
    "key": "cmd+escape",
    "command": "notifications.hideToasts",
    "when": "notificationToastsVisible"
  },

  // Remap to more granular zoom controls
  // {
  //   "key": "cmd+=",
  //   "command": "zoombar-vscode.zoomIn"
  // },
  // {
  //   "key": "cmd+-",
  //   "command": "zoombar-vscode.zoomOut"
  // },

  // Unbind cmd+w to prefer :q
  // {
  //   "key": "cmd+w",
  //   "command": "workbench.action.closeWindow",
  //   "when": "!editorTextFocus && !editorIsOpen && !multipleEditorGroups"
  // },

  // Sonic Pi
  {
    "key": "ctrl+alt+s",
    "command": "workbench.action.tasks.runTask",
    "args": "sonic-pi-play",
    "when": "editorLangId == ruby"
  },
  {
    "key": "ctrl+alt+a", // customize the shortcut
    "command": "workbench.action.tasks.runTask",
    "args": "sonic-pi-stop",
    "when": "editorLangId == ruby"
  },

  {
    "key": "cmd+alt+ctrl+g",
    "command": "workbench.action.tasks.runTask",
    "args": "fugitive"
  },
  {
    "key": "cmd+g b",
    "command": "git.checkout",
  },


  // Edamagit
  // @see https://github.com/kahole/edamagit#vim-support-vscodevim

  {
    "key": "g g",
    "command": "cursorTop",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "g r",
    "command": "magit.refresh",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "=",
    "command": "magit.toggle-fold",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode != 'Insert'"
  },
  {
    "key": "c c",
    "command": "magit.commit",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode != 'Insert'"
  },
  {
    "key": "tab",
    "command": "extension.vim_tab",
    "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
  },
  {
    "key": "tab",
    "command": "-extension.vim_tab",
    "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "x",
    "command": "magit.discard-at-point",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "k",
    "command": "-magit.discard-at-point"
  },
  {
    "key": "-",
    "command": "magit.reverse-at-point",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "v",
    "command": "-magit.reverse-at-point"
  },
  {
    "key": "shift+-",
    "command": "magit.reverting",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "shift+v",
    "command": "-magit.reverting"
  },
  {
    "key": "shift+o",
    "command": "magit.resetting",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "shift+x",
    "command": "-magit.resetting"
  },
  {
    "key": "x",
    "command": "-magit.reset-mixed"
  },
  {
    "key": "ctrl+u x",
    "command": "-magit.reset-hard"
  },
  // end magit - need to organize these.
  {
    "key": "ctrl+cmd+t",
    "command": "workbench.action.tasks.runTask"
  },
  {
    "key": "ctrl+cmd+g",
    "command": "workbench.view.scm",
    "when": "workbench.scm.active"
  },
  {
    "key": "ctrl+shift+g",
    "command": "-workbench.view.scm",
    "when": "workbench.scm.active"
  },
  {
    "key": "ctrl+cmd+g",
    "command": "workbench.view.scm",
    "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g",
    "command": "-workbench.view.scm",
    "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "cmd+g cmd+v",
    "command": "workbench.panel.chat.view.copilot.focus"
  }
]
