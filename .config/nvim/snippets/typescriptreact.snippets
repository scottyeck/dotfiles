extends typescript

snippet reactCreateContextSnippet "react createContext"
	type T${1}ContextValue = {
		${2}: ${3}
	};

	export const ${1}Context = createContext<T${1}ContextValue>({} as T${1}ContextValue);
	export function use${1}Context() {
		return useContext(${1}Context);
	}

	export function ${1}ContextProvider({ children }: { children?: React.ReactNode }) {
		const value = {
			// ${4}
		};
		return <${1}Context.Provider value={value}>{children}</${1}Context.Provider>;
	}

snippet reactParentComponentSnippet "react parent component"
	function ${1}({ children }: { children: React.ReactNode }) {
		return (
			${2}
		);
	}

snippet reactFileComponentSnippet "react file component"
	type ${TM_FILENAME_BASE}Props = {
		${1}
	};

	export function ${TM_FILENAME_BASE}(props: ${TM_FILENAME_BASE}Props) {
		${2}
	}


snippet reactComponentSnippet "react component"
	type ${1}Props = {
		${2}
	};

	export function ${1}(props: ${1}Props) {

	}

snippet mantineUseDisclosureSnippet "mantine useDisclosure"
	const [opened, handlers] = useDisclosure(false);
	${0}

snippet mantineModalSnippet "mantine modal"
	import { Modal, ModalProps } from "@mantine/core";

	export function ${TM_FILENAME_BASE}(modalProps: ModalProps) {
		return (
			<Modal title="${2}" {...modalProps}>
				${0}
			</Modal>
		)
	}

snippet mantineMenuTargetSnippet "mantine menu target"
	<Menu>
		<Menu.Target>
			${1}
		</Menu.Target>
		<Menu.Dropdown>
			<Menu.Item>
				${0}
			</Menu.Item>
		</Menu.Dropdown>
	</Menu>
